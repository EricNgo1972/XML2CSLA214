Imports pbs.Helper
Imports pbs.Helper.Extensions
Imports pbs.BO
Imports System.ComponentModel
Imports pbs.BO.DataAnnotations
Imports pbs.BO.DB

Namespace MetaData

    Public Class ClassDefinitionFactory

        Shared Function GetClassDefinition(pClassId As String, Optional SampleEntityCode As String = "") As EditableDefinition

            Dim ret = New EditableDefinition

            'pbsAssemblies.GetEditableTypes()

            Dim theType = pbs.BO.pbsAssemblies.GetClassType(pClassId)

            If theType IsNot Nothing Then

                If theType.GetInterfaces.Contains(GetType(ISingleton)) Then
                    ret.IsSingleton = True
                End If

                If theType.GetInterfaces.Contains(GetType(Script.ISupportScripts)) Then
                    Dim sample = TryCast(pbs.BO.BOFactory.CreateSampleObj(theType.ToString), Script.ISupportScripts)

                    For Each s In sample.GetScriptDictionary()
                        ret.Scripts.Add(New EditableDefinition.ActionScript() With {.Code = s.Key, .Caption = s.Value.CaptionKey, .Image = s.Value.IconName, .Location = s.Value.ButtonLocation})
                    Next

                End If

                ret.ClassName = theType.ToString().Leaf()
                ret.Description = theType.PhoebusCommandDesc()
                ret.ClassNameSpace = theType.Namespace

                For Each attr As DBAttribute In theType.GetCustomAttributes(GetType(DBAttribute), True)

                    Dim dbName = attr.TableName
                    If dbName.hasFamily Then
                        ret.SubTable = dbName.Leaf
                        ret.DBTableName = dbName.Root
                    Else
                        ret.DBTableName = dbName
                    End If

                Next

                'Fields
                Dim theFields = pbs.BO.BusinessRules.SchemaProvider.GetFields(theType.ToString)

                Dim index = 1
                For Each fld In theFields
                    Dim theClassField = New ClassField(fld)

                    theClassField.Index = index

                    index += 1

                    Dim prop = theType.GetProperty(fld.FieldName)
                    If prop IsNot Nothing Then

                        If Not prop.DeclaringType.Equals(theType) Then Continue For

                        theClassField.ClassName = ret.ClassName

                        'single property

                        theClassField.IsReadonly = Not prop.CanWrite

                        theClassField.PropType = Mapper.FieldType411(prop.PropertyType.ToString.Leaf)

                        For Each attr As DataObjectFieldAttribute In prop.GetCustomAttributes(GetType(DataObjectFieldAttribute), True)
                            theClassField.IsPrimaryKey = attr.PrimaryKey
                            theClassField.IsAutoGenerated = attr.IsIdentity
                        Next

                        For Each attr As BrowsableAttribute In prop.GetCustomAttributes(GetType(BrowsableAttribute), True)
                            theClassField.IsBrowsable = attr.Browsable
                        Next

                        For Each attr As CellInfoAttribute In prop.GetCustomAttributes(GetType(CellInfoAttribute), True)
                            theClassField.Tips = attr.Tips
                            theClassField.GroupName = attr.GroupName
                            theClassField.ControlType = attr.ControlType
                            theClassField.IsHidden = attr.Hidden
                            theClassField.LookupCode = attr.LookupCode

                            If String.IsNullOrEmpty(ret._dagField) Then
                                If theClassField.LookupCode.MatchesRegExp("^DA$|^DAG$|pbs\.UsrMan\.DA|DataAccessGroup") OrElse theClassField.FieldName = "DataAccessGroup" Then
                                    ret.DAGField = prop.Name
                                End If

                            End If

                            theClassField.InputOptions = attr.InputOptions
                        Next

                        'Children - table
                        For Each attr As TableRangeInfoAttribute In prop.GetCustomAttributes(GetType(TableRangeInfoAttribute), True)

                            theClassField.GroupName = attr.GroupName
                            theClassField.IsChildCollection = True

                            theClassField.PropType = prop.PropertyType.ToString
                            theClassField.ChildType = prop.PropertyType.GetGenericType().ToString

                        Next


                    End If

                    Dim backField = theType.GetField(fld.FieldName.GuessFieldName(), Reflection.BindingFlags.NonPublic Or Reflection.BindingFlags.Instance)
                    If backField IsNot Nothing Then
                        theClassField.FieldType = backField.FieldType.ToString.Leaf()
                    Else
                        theClassField.FieldType = "string"
                    End If


                    ret.Fields.Add(theClassField)


                Next


                'Read database from cache file 
                Dim theDBSchema = pbs.BO.DB.DatabaseSchema.GetTableDictionary()
                Dim columns As Dictionary(Of String, pbs.BO.DB.DBColumn) = Nothing
                If theDBSchema.TryGetValue(ret.DBTableName.Replace("{XXX}", SampleEntityCode).Replace("XXX", SampleEntityCode), columns) Then

                    For Each fld In ret.Fields

                        For Each itm In columns
                            If fld.FieldName.Equals(itm.Key.PascalConv) Then
                                fld.DatabaseFieldName = itm.Key
                                fld.DBType = itm.Value._colType.Leaf
                            End If
                        Next


                    Next

                End If


            End If


            Return ret

        End Function

    End Class

End Namespace
